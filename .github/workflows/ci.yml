name: CI

on: [push, pull_request]

jobs:
    test:
        runs-on: ${{ matrix.operating-system }}
        env:
            SYMFONY_ENV: behat
            DB_HOST: localhost
            # @todo run at least one test on pgsql. Also: make docker tests run on mysql versions 5.6, 5.7, 8.0
            DB_TYPE: mysql
            DB_ROOT_PASSWORD: root
            DB_EZ_USER: ezp
            DB_EZ_PASSWORD: ezp
            DB_EZ_DATABASE: behattestdb
            # @todo skip setting this, always use the php version from the config file ?
            # Note that PHP_VERSION has higher priority than TESTSTACK_PHP_VERSION from the config file
            PHP_VERSION: ${{ matrix.php }}
        strategy:
            fail-fast: false
            matrix:
                # @see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners for available os versions
                # @todo add some tests running on 'windows-latest'
                include:
                    - php: "5.6"
                      operating-system: 'ubuntu-20.04'
                      config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.cp.env'
                    - php: "7.0"
                      operating-system: 'ubuntu-20.04'
                      config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.1.7.env'
                    - php: "7.1"
                      operating-system: 'ubuntu-20.04'
                      config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.1.13.env'
                    - php: "7.2"
                      operating-system: 'ubuntu-22.04'
                      config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.2.3.env'
                    - php: "7.3"
                      operating-system: 'ubuntu-22.04'
                      config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.2.4.env'
                    - php: "7.4"
                      operating-system: 'ubuntu-22.04'
                      config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.2.5.env'
                    #- php: "7.3"
                    #  operating-system: 'ubuntu-20.04'
                    #  config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.3.0.env'
                    #- php: "7.3"
                    #  operating-system: 'ubuntu-20.04'
                    #  config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.3.1.env'
                    #- php: "7.4"
                    #  operating-system: 'ubuntu-22.04'
                    #  config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.3.2.env'
                    #- php: "8.0"
                    #  operating-system: 'ubuntu-22.04'
                    #  config_file: 'doc/config_examples/bundle_with_extra_dependencies/.euts.3.3.env'
                    #- php: "8.1"
                    #  operating-system: 'ubuntu-22.04'
                    #  config_file: 'doc/config_examples/bundle_with_extra_dependencies/...'
        steps:
            - name: checkout code
              uses: actions/checkout@v2

            - name: setup
              run: |
                # just in case...
                chmod 755 ./teststack ./bin/*.sh ./bin/setup/*.sh
                # a minimal composer.json is required to allow installation of package dependencies using "dev-master",
                # fix behattestdb for ez cp version, etc...
                mkdir /tmp/composer_cache
                cp tests/config/composer.json .
                # patch the configuration file we will use: we won't have the mig bundle available
                sed -i 's/Kaliop\\eZMigrationBundle\\EzMigrationBundle //' ${{ matrix.config_file }}

            # 1st test: set up the app and check that the sf console works - locally

            # set up the test stack locally, ie. without docker containers
            # NB: the php version in use here is not the one from the .env config file, but the one set in the matrix above
            - name: GHA test
              run: |
                set -a && . ${{ matrix.config_file }} && set +a
                ./bin/setup.sh
                ./bin/sfconsole.sh list
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # reset the env which we built
            - name: cleanup env
              run: |
                # @todo stop other services such as webserver, to leave ore ram available for the docker tests
                sudo systemctl stop mysql.service
                # @todo using the composer.lock file and vendors from the previous run makes install quicker, but then we
                #       should make sure php versions (and extensions) are in sync.
                mv vendor vendor_nodocker

            # 2nd test: set up the container stack and check that the sf console works in it

            # @todo look at commit 7a0688f47047d70357cee0b77951dcd927157512 for a take on doubling workers and letting each only run one test...

            # build the test stack docker images - without app setup
            - name: 'docker stack: containers build'
              run: |
                export DB_HOST=mysql
                export GITHUB_ACTION=
                ./teststack -e ${{ matrix.config_file }} -n -w 300 build

            # troubleshooting failures
            #-
            #    if: ${{ failure() }}
            #    run: 'DB_HOST=mysql ./teststack -e ${{ matrix.config_file }} logs ez; ./teststack -e ${{ matrix.config_file }} top'

            - name: 'docker stack: test'
              run: |
                export DB_HOST=mysql
                export GITHUB_ACTION=
                export TESTSTACK_CONFIG_FILE=${{ matrix.config_file }}
                ./teststack logs
                ./teststack ps
                ./teststack services
                ./teststack images
                ./teststack top
                ./teststack exec cp /home/test/teststack/tests/config/composer.json /home/test/bundle
                ./teststack stop
                # set up the application
                ./teststack setup
                # @todo run more commands...
                #- run: './teststack pause'
                #- run: './teststack unpause'
                #- run: './teststack resetdb'
                ./teststack exec ../teststack/bin/sfconsole.sh list
                ./teststack cleanup ez-logs
                ./teststack stop
                ./teststack cleanup logs

            # troubleshooting failures
            #- name: troubleshooting info
            #  if: ${{ failure() }}
            #  run: |
            #    env
            #    php -i
            #    docker logs
